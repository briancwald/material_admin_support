<?php

/**
 * @file
 * Contains material_admin_support.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function material_admin_support_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the material_admin_support module.
    case 'help.page.material_admin_support':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Support module extends the functionality of Material_admin theme') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function material_admin_support_theme() {
  return [
    'node__content_browser' => [
      'render element' => 'content',
      'base hook' => 'node',
      'template' => 'node--content-browser',
    ],
    'media__media_browser' => [
      'render element' => 'media',
      'base hook' => 'media_entity',
      'template' => 'media--media-browser',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function material_admin_support_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'material_admin_support/global';
}

/**
 * Implements hook_library_info_alter().
 */
function material_admin_library_info_alter(&$libraries, $extension) {
  $path = '/' . drupal_get_path('module', 'material_admin_support');
  $base_definition = [
    'version' => 'VERSION',
    'css' => [
      'base' => [
        $path . '/css/browsers.css' => [],
        $path . '/css/browsers.css' => [],
      ],
    ],
    'js' => [
      $path . '/js/browsers.js' => [],
    ],
    'dependencies' => [
      'core/jquery',
      'core/drupal',
    ],
  ];
  if ($extension == 'content_browser' ) {
    $libraries['view'] = $base_definition;
  }
  else if ($extension == 'lightning_media') {
    $libraries['browser.styling'] = $base_definition;
  }
  else if ($extension == 'entity_browser') {
    $libraries['entity_browser']['css']['theme'][$path . '/css/browsers.css'] = [];
  }
}

/**
 * Implements hook_preprocess_block.
 */
function material_admin_support_preprocess_block(&$variables) {
  $template = '<div class="fixed-action-btn horizontal">
        <a class="btn-floating btn-large {{ fab_color }}">
          <i class="large material-icons">{{ fab_icon }}</i>
        </a>
        <ul>
          {%- for link in fab_links -%}
            <li>
              <a class="btn-floating tooltipped" data-position="top" data-delay="600" data-tooltip="{{ link.tooltip }}" style="background-color: {{ link.color }};" href="{{ link.href }}">
                {% if link.icon == \'instagram\' or link.icon == \'twitter\' %}
                  <i class="socicon-{{ link.icon }} left" style="font-size: 1.2rem;"></i>
                {% else %}
                  <i class="material-icons left">{{ link.icon }}</i>
                {% endif %}
              </a>
            </li>
          {%- endfor -%}
        </ul>
      </div>';
  $template_vars = [];
  if ($variables['plugin_id'] == 'local_actions_block') {
    if (isset($variables['content']['node.add_page'])) {
      $template_vars['fab_color'] = 'red';
      $template_vars['fab_icon'] = 'add';
      $template_vars['fab_links'] = [];
      /** @var \Drupal\node\NodeTypeInterface $type */
      foreach (\Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple() as $type) {
        $access = \Drupal::entityTypeManager()->getAccessControlHandler('node')->createAccess($type->id(), NULL, [], TRUE);
        if ($access->isAllowed()) {
          $url = new Url('node.add', ['node_type' => $type->id()]);
          $template_vars['fab_links'][] = [
            'color' => type_style_get_style($type, 'color', '#039BE5'),
            'icon' => type_style_get_style($type, 'icon', 'star'),
            'href' => $url->toString(),
            'tooltip' => $type->label(),
          ];
        }
      }
    } elseif (isset($variables['content']['media.add'])) {
      $template_vars['fab_color'] = 'red';
      $template_vars['fab_icon'] = 'add';
      $template_vars['fab_links'] = [];
      /** @var \Drupal\media_entity\Entity\MediaBundle $type */
      $any_access = FALSE;
      foreach (\Drupal::entityTypeManager()->getStorage('media_bundle')->loadMultiple() as $type) {
        $access = \Drupal::entityTypeManager()->getAccessControlHandler('media')->createAccess($type->id(), NULL, [], TRUE);
        if ($access->isAllowed()) {
          $any_access = TRUE;
          $url = new Url('entity.media.add_form', ['media_bundle' => $type->id()]);
          $template_vars['fab_links'][] = [
            'color' => type_style_get_style($type, 'color', '#039BE5'),
            'icon' => type_style_get_style($type, 'icon', 'star'),
            'href' => $url->toString(),
            'tooltip' => $type->label(),
          ];
        }
      }
      if ($any_access) {
        $url = new Url('lightning_media.bulk_upload');
        $template_vars['fab_links'][] = [
          'color' => '#ff6f00',
          'icon' => 'file_upload',
          'href' => $url->toString(),
          'tooltip' => 'Bulk upload',
        ];
      }
    }
  }
  if (!empty($template_vars)) {
    $variables['content'] = [
      '#type' => 'inline_template',
      '#template' => $template,
      '#context' => $template_vars,
    ];
  }
}
