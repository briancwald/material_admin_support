<?php

/**
 * @file
 * Contains material_admin_support.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function material_admin_support_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the material_admin_support module.
    case 'help.page.material_admin_support':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Support module extends the functionality of Material_admin theme') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function material_admin_support_theme() {
  return [
    'node__content_browser' => [
      'render element' => 'content',
      'base hook' => 'node',
      'template' => 'node--content-browser',
    ],
    'media__media_browser' => [
      'render element' => 'media',
      'base hook' => 'media',
      'template' => 'media--media-browser',
    ],
    'material_admin_support_fab' => [
      'base hook' => 'material_admin_support_fab',
      'template' => 'material-admin-support-fab',
      'variables' => [
        'color' => 'red',
        'icon' => 'add',
        'links' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function material_admin_support_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'material_admin_support/global';
}

/**
 * Implements hook_library_info_alter().
 */
function material_admin_library_info_alter(&$libraries, $extension) {
  // Completely override other entity browser modules with our styling/logic.
  $path = '/' . drupal_get_path('module', 'material_admin_support');
  $base_definition = [
    'version' => 'VERSION',
    'css' => [
      'base' => [
        $path . '/css/browsers.css' => [],
        $path . '/css/browsers.css' => [],
      ],
    ],
    'js' => [
      $path . '/js/browsers.js' => [],
    ],
    'dependencies' => [
      'core/jquery',
      'core/drupal',
    ],
  ];
  if ($extension == 'content_browser' ) {
    $libraries['view'] = $base_definition;
  }
  else if ($extension == 'lightning_media') {
    $libraries['browser.styling'] = $base_definition;
  }
  else if ($extension == 'entity_browser') {
    $libraries['entity_browser']['css']['theme'][$path . '/css/browsers.css'] = [];
  }
}

/**
 * Implements hook_preprocess_block.
 */
function material_admin_support_preprocess_block(&$variables) {
  $links = [];
  $manager = \Drupal::entityTypeManager();
  if ($variables['plugin_id'] == 'local_actions_block') {
    if (isset($variables['content']['node.add_page'])) {
      /** @var \Drupal\node\NodeTypeInterface $type */
      foreach ($manager->getStorage('node_type')->loadMultiple() as $type) {
        $access = $manager->getAccessControlHandler('node')->createAccess($type->id(), NULL, [], TRUE);
        if ($access->isAllowed()) {
          $url = new Url('node.add', ['node_type' => $type->id()]);
          $links[] = [
            'color' => type_style_get_style($type, 'color', '#039BE5'),
            'icon' => type_style_get_style($type, 'icon', 'star'),
            'href' => $url->toString(),
            'tooltip' => $type->label(),
          ];
        }
      }
    } elseif (isset($variables['content']['media.add'])) {
      /** @var \Drupal\media\Entity\MediaType $type */
      $any_access = FALSE;
      foreach ($manager->getStorage('media_type')->loadMultiple() as $type) {
        $access = $manager->getAccessControlHandler('media')->createAccess($type->id(), NULL, [], TRUE);
        if ($access->isAllowed()) {
          $any_access = TRUE;
          $url = new Url('entity.media.add_form', ['media_type' => $type->id()]);
          $links[] = [
            'color' => type_style_get_style($type, 'color', '#039BE5'),
            'icon' => type_style_get_style($type, 'icon', 'star'),
            'href' => $url->toString(),
            'tooltip' => $type->label(),
          ];
        }
      }
      if ($any_access && isset($variables['content']['lightning_media.bulk_upload'])) {
        $url = new Url('lightning_media.bulk_upload');
        $links[] = [
          'color' => '#ff6f00',
          'icon' => 'file_upload',
          'href' => $url->toString(),
          'tooltip' => 'Bulk upload',
        ];
      }
    }
  }
  if (!empty($links)) {
    $variables['content'] = [
      '#theme' => 'material_admin_support_fab',
      '#links' => $links,
      '#cache' => [
        'contexts' => ['route', 'user.permissions']
      ],
    ];
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function material_admin_support_module_implements_alter(&$implementations, $hook) {
  // Lightning media overrides the normal Entity Browser widget, but for our
  // use case and admin theme the level of details nesting looks bad.
  if (($hook === 'field_widget_entity_browser_entity_reference_form_alter' || $hook === 'field_widget_form_alter') && isset($implementations['lightning_media'])) {
    unset($implementations['lightning_media']);
  }
}

/**
 * Attaches the icon picker onto a form element.
 *
 * @param array &$element
 *   A render array element, which should be a textfield.
 */
function _material_admin_support_attach_iconpicker(&$element) {
  $element['#attributes']['class'][] = 'use-material-icon-picker';
  $element['#attached']['library'][] = 'material_admin_support/iconpicker';
}

/**
 * Implements hook_type_style_form_alter().
 */
function material_admin_support_type_style_form_alter(array &$form, \Drupal\Core\Config\Entity\ConfigEntityBundleBase $type) {
  _material_admin_support_attach_iconpicker($form['type_style']['icon']);
}
